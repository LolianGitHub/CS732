{"version":3,"sources":["layout-components/nav-bar.module.css","layout-components/card.module.css","layout-components/page-header.module.css","app.module.css","layout-components/dialog.module.css","layout-components/table.module.css","to-do-page.module.css","layout-components/page-header.js","layout-components/nav-bar.js","layout-components/column-layout.js","layout-components/card.js","layout-components/dialog.js","components/to-do-list.js","to-do-page.js","redux/actions/todos.js","redux/actions/action-types.js","calendar-page.js","api/index.js","api/todos.js","api/events.js","App.js","redux/actions/thunk/index.js","redux/reducers/todos.js","redux/reducers/events.js","redux/reducers/index.js","redux/store.js","index.js","components/loading-view.js"],"names":["module","exports","PageHeader","title","description","className","styles","header","NavBar","beforeLinks","links","afterLinks","nav","before","map","link","index","key","to","path","activeClassName","activeLink","text","after","ColumnLayout","columns","children","style","colDefs","isNaN","Array","fill","join","divStyle","display","gridAutoRows","gridTemplateColumns","columnGap","Column","flexDirection","justifyContent","alignItems","Card","img","card","src","alt","cardText","Dialog","buttons","onButtonClick","dialogBackground","marginTop","name","marginLeft","onClick","e","buttonName","ToDoList","todos","onSetComplete","table","todo","type","checked","completed","onChange","isComplete","target","ToDoPage","props","state","newTodoText","this","addTodo","history","setState","goBack","match","setTodoComplete","url","numCompleted","filter","length","numIncomplete","ToDoListCard","onNewTodoClick","push","SummaryCard","exact","handleDialogButtonClick","addTodoForm","value","React","Component","mapDispatchToProps","connect","withRouter","events","CalendarCard","EventsCard","now","moment","currentEvent","find","event","isAfter","start","isBefore","end","futureEvents","sort","nextEvent","numEventsToday","isSame","numEventsThisWeek","numEventsThisMonth","UpcomingEvent","messageIfNoEvent","timeText","calendar","getTodos","fetch","then","res","json","method","headers","body","JSON","stringify","getEvents","App","loadTodos","container","numUpcomingEvents","numPendingTodos","format","dispatch","Api","loadTodosSuccess","error","err","message","todos_AddTodo","action","id","uuid","modified","todos_SetTodoComplete","Object","assign","todos_LoadTodosLoading","todos_LoadTodosSuccess","incoming","inc","concat","todoA","undefined","todoB","todos_LoadTodosError","events_AddEvent","events_LoadEventsLoading","events_LoadEventsSuccess","mergedEvents","eventA","eventB","events_LoadEventsError","combineReducers","persistConfig","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","store","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","persistor","persistStore","ReactDOM","render","loading","width","height","document","querySelector"],"mappings":"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","file":"static/js/main.3096517d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav-bar_nav__uTaNY\",\"before\":\"nav-bar_before__hn69u\",\"links\":\"nav-bar_links__3-ZLn\",\"after\":\"nav-bar_after__1Ot1d\",\"activeLink\":\"nav-bar_activeLink__20r6h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__1WiCg\",\"cardText\":\"card_cardText__aE9RK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"page-header_header__2pABr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__10y0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogBackground\":\"dialog_dialogBackground__3ysBd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__3HrdH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTodoForm\":\"to-do-page_addTodoForm__zrBkE\"};","import React from 'react';\r\nimport styles from './page-header.module.css';\r\n\r\n/**\r\n * Renders a header with a given title an description\r\n * \r\n * @param title The header's title\r\n * @param description The header's description\r\n */\r\nexport default function PageHeader({ title, description }) {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1>{title}</h1>\r\n            <p>{description}</p>\r\n        </header>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './nav-bar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n/**\r\n * Renders a nav containing some number of NavLinks, as well as arbitrary content before and after those links.\r\n * \r\n * @param beforeLinks Any components to render on the navbar before the links. Left-aligned by default.\r\n * @param links Any links to render on the navbar. Each link should have a `path` and `text`. Centered by default.\r\n * @param afterLinks Any components to render on the navbar after the links. Right-aligned by default.\r\n */\r\nexport default function NavBar({ beforeLinks, links, afterLinks }) {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.before}>{beforeLinks}</div>\r\n            <div className={styles.links}>\r\n                {links.map((link, index) =>\r\n                    <NavLink key={index} to={link.path} activeClassName={styles.activeLink}>{link.text}</NavLink>)}\r\n            </div>\r\n            <div className={styles.after}>{afterLinks}</div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\n\r\n/**\r\n * Renders a column layout. A column layout is grid-based, where each column can be\r\n * sized as the user wishes.\r\n * \r\n * @param columns The column definitions, or the number of equal-sized columns to have.\r\n * @param children The columns themselves\r\n * @param style Any additional styles to apply to this layout\r\n */\r\nexport function ColumnLayout({ columns, children, style }) {\r\n\r\n    let colDefs = \"1fr\";\r\n    if (columns) {\r\n        if (isNaN(columns)) {\r\n            colDefs = columns;\r\n        }\r\n        else {\r\n            colDefs = new Array(columns).fill(\"1fr\").join(\" \");\r\n        }\r\n    }\r\n\r\n    const divStyle = {\r\n        display: \"grid\",\r\n        gridAutoRows: \"auto\",\r\n        gridTemplateColumns: colDefs,\r\n        columnGap: \"var(--std-spacing)\",\r\n        ...style\r\n    }\r\n\r\n    return <div style={divStyle}>{children}</div>;\r\n}\r\n\r\n/**\r\n * A single column within the column layout. Will automaticlly be set to lay out its own\r\n * children in a column which stretches its full allowed width. You may override these\r\n * default styles by supplying your own in the style property.\r\n * \r\n * @param style Any additional styles to apply to this column\r\n * @param children The components to render inside this column\r\n */\r\nexport function Column({ style, children }) {\r\n    const divStyle = {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"stretch\",\r\n        ...style\r\n    }\r\n    return <div style={divStyle}>{children}</div>\r\n}","import React from 'react';\r\nimport styles from './card.module.css';\r\n\r\n/**\r\n * Renders a \"card\", wwhich has an optional image, a title, and arbitrary content (defined by\r\n * this component's children).\r\n * \r\n * @param img The image to display at the top of the card, if any\r\n * @param title The card title\r\n * @param children Any child elements to display within the card body\r\n */\r\nexport default function Card({ img, title, children }) {\r\n    return (\r\n        <div className={styles.card}>\r\n            {img && <img src={img} alt=\"\" />}\r\n            <div className={styles.cardText}>\r\n                {title && <h1>{title}</h1>}\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './dialog.module.css';\r\nimport Card from './card';\r\n\r\nexport default function Dialog({ title, buttons, onButtonClick, children }) {\r\n\r\n    return (\r\n        <div className={styles.dialogBackground}>\r\n            <div>\r\n                <Card title={title}>\r\n                    <div>\r\n                        {children}\r\n                    </div>\r\n                    <div className=\"flex-row-end\" style={{ marginTop: \"var(--half-spacing)\" }}>\r\n                        {buttons && buttons.map((name, index) =>\r\n                            <button\r\n                                key={index}\r\n                                style={{ marginLeft: \"var(--half-spacing)\" }}\r\n                                onClick={e => onButtonClick({ ...e, buttonName: name })}>{name}</button>\r\n                        )}\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport styles from '../layout-components/table.module.css';\r\n\r\n/**\r\n * Displays a table of to-do items. When a checkbox corresponding to an item's \"completed\" status is changed,\r\n * an event will be raised.\r\n * \r\n * NOTE: If we have the following function definition:\r\n * ```js\r\n * function ToDoList({ todos, onSetComplete }) { ... }\r\n * ```\r\n * Then, we can use `todos` and `onSetComplete` as variables within this function.\r\n * \r\n * Otherwise, if our definition was:\r\n * ```js\r\n * function ToDoList(props) { ... }\r\n * ```\r\n * Then we would need to use `props.todos` and `props.onSetComplete`.\r\n * \r\n * @see \"Destructuring\", at https://www.smashingmagazine.com/2016/07/how-to-use-arguments-and-parameters-in-ecmascript-6/\r\n * \r\n * @param todos The to-do items to display\r\n * @param onSetComplete The event handler to call if a \"completed\" checkbox is changed.\r\n */\r\nexport default function ToDoList({ todos, onSetComplete }) {\r\n\r\n    return (\r\n        <table className={styles.table}>\r\n            <thead>\r\n                <tr><th>Item</th><th>Complete?</th></tr>\r\n            </thead>\r\n            <tbody>\r\n                {todos && todos.map((todo, index) =>\r\n                    <tr key={index}>\r\n                        <td>{todo.text}</td>\r\n                        <td><label>\r\n                            <input type=\"checkbox\" checked={todo.completed} onChange={(e) => onSetComplete({\r\n                                index,\r\n                                isComplete: e.target.checked\r\n                            })} />\r\n                            <span> {todo.completed ? \"Complete\" : \"Incomplete\"}</span>\r\n                        </label></td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React from 'react';\r\nimport { ColumnLayout, Column } from './layout-components/column-layout';\r\nimport Card from './layout-components/card';\r\nimport Dialog from './layout-components/dialog'\r\nimport ToDoList from './components/to-do-list';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo, setTodoComplete } from './redux/actions';\r\nimport { Switch, Route, withRouter } from 'react-router-dom';\r\nimport styles from './to-do-page.module.css';\r\n\r\nclass ToDoPage extends React.Component {\r\n\r\n    /**\r\n     * Creates a new ToDoPage and sets its internal state, which keeps track of the contents of the \"new to-do\"\r\n     * dialog, to a default value.\r\n     * \r\n     * Note: This is an example of where it can be OK to store some local state like this, in addition to using Redux.\r\n     * The contents of that text box will absolutely in no way ever be needed outside of this ToDoPage, and it doesn't\r\n     * really matter if its value gets lost e.g. when we switch pages, so storing it as local state rather than adding\r\n     * it to the Redux store is absolutely fine.\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newTodoText: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a click event on any of the buttons on the \"new to-do\" dialog box.\r\n     * \r\n     * @param buttonName The name of the button that was clicked.\r\n     */\r\n    handleDialogButtonClick({ buttonName }) {\r\n\r\n        const { addTodo, history } = this.props;\r\n\r\n        if (buttonName === \"Ok\" && this.state.newTodoText) {\r\n            addTodo(this.state.newTodoText);\r\n        }\r\n        this.setState({ newTodoText: \"\" });\r\n        history.goBack();\r\n    }\r\n\r\n    /**\r\n     * Renders a two-column layout. The first column displays the to-do items in a list, while\r\n     * allowing their completed status to be toggled. The second column contains a summary of how many items are\r\n     * complete / incomplete.\r\n     * \r\n     * In addition, if the path is \"/add\", a Dialog will be rendered allowing the user to add a new to-do item.\r\n     */\r\n    render() {\r\n\r\n        /**\r\n         * Grabbing useful bits & pieces out of this.props.\r\n         * \r\n         * \"history\" is a React Router object that allows us to programmatically do client-side navigation. See\r\n         * below for an example of how it works.\r\n         */\r\n        const { match, todos, setTodoComplete, history } = this.props;\r\n        const { url, path } = match;\r\n\r\n        const numCompleted = todos.filter(todo => todo.completed).length;\r\n        const numIncomplete = todos.length - numCompleted;\r\n\r\n        return (\r\n            <>\r\n                <ColumnLayout columns=\"1fr 300px\">\r\n\r\n                    <Column>\r\n                        {/* When the \"Add\" button is clicked, we will navigate to /add. */}\r\n                        <ToDoListCard\r\n                            todos={todos}\r\n                            onSetComplete={e => setTodoComplete(e.index, e.isComplete)}\r\n                            onNewTodoClick={e => history.push(`${url}/add`)} />\r\n                    </Column>\r\n\r\n                    <Column>\r\n                        <SummaryCard numCompleted={numCompleted} numIncomplete={numIncomplete} />\r\n                    </Column>\r\n                </ColumnLayout>\r\n\r\n                {/* If we're navigated to /add, then we'll render a Dialog box that allows us to add new items. */}\r\n                <Switch>\r\n                    <Route exact path={`${path}/add`}>\r\n                        <Dialog title=\"New to-do\" buttons={[\"Ok\", \"Cancel\"]} onButtonClick={e => this.handleDialogButtonClick(e)}>\r\n                            <div className={styles.addTodoForm}>\r\n                                <label>Text:</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.newTodoText}\r\n                                    onChange={e => this.setState({ newTodoText: e.target.value })} />\r\n                            </div>\r\n                        </Dialog>\r\n                    </Route>\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// This code connects TodoPage to the Redux store.\r\n// -------------------------------------------------------------\r\n/**\r\n * This function will configure the ToDoPage to have the to-do list from the Redux store\r\n * accessible via a prop called \"todos\".\r\n * \r\n * @param state The entire Redux state tree\r\n */\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        todos: state.todos\r\n    };\r\n}\r\n\r\n/**\r\n * This object will configure the ToDoPage to have a property called \"setTodoComplete\".\r\n * That property will be a function which will dispatch the Redux action with the same name\r\n * to the store.\r\n */\r\nconst mapDispatchToProps = {\r\n    addTodo,\r\n    setTodoComplete\r\n}\r\n\r\n// Applies the config using the \"connect\" higher-order component provided by Redux\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ToDoPage));\r\n// -------------------------------------------------------------\r\n\r\n/**\r\n * Renders a Card containing a ToDoList displaying the given items.\r\n * \r\n * @param todos The to-do items to display\r\n * @param onSetComplete The event handler to be called when the completed status of an item should be changed\r\n */\r\nfunction ToDoListCard({ todos, onSetComplete, onNewTodoClick }) {\r\n    return (\r\n        <Card title=\"My To-Dos\">\r\n            <ToDoList todos={todos} onSetComplete={e => onSetComplete(e)} />\r\n            <div className=\"flex-row-end\" style={{ marginTop: \"var(--half-spacing)\" }}>\r\n                <button onClick={e => onNewTodoClick(e)}>Add Todo</button>\r\n            </div>\r\n        </Card >\r\n    );\r\n}\r\n\r\n/**\r\n * Renders a Card containing information about the number of complete / incomplete to-do items.\r\n * \r\n * @param numCompleted The number of completed to-do items\r\n * @param numIncomplete The number of incomplete to-do items\r\n */\r\nfunction SummaryCard({ numCompleted, numIncomplete }) {\r\n    return (\r\n        <Card title=\"Summary\">\r\n            <p>Completed items: <strong>{numCompleted}</strong></p>\r\n            <p>Still to-do: <strong>{numIncomplete}</strong></p>\r\n        </Card>\r\n    );\r\n}","import { ADD_TODO, SET_TODO_COMPLETE, LOAD_TODOS_LOADING, LOAD_TODOS_SUCCESS, LOAD_TODOS_ERROR } from './action-types';\r\n\r\nexport function addTodo(text) {\r\n    return {\r\n        type: ADD_TODO,\r\n        text\r\n    }\r\n}\r\n\r\nexport function setTodoComplete(index, completed) {\r\n    return {\r\n        type: SET_TODO_COMPLETE,\r\n        index,\r\n        completed\r\n    }\r\n}\r\n\r\nexport function loadTodosLoading() {\r\n    return {\r\n        type: LOAD_TODOS_LOADING\r\n    }\r\n}\r\n\r\nexport function loadTodosSuccess(todos) {\r\n    return {\r\n        type: LOAD_TODOS_SUCCESS,\r\n        todos\r\n    }\r\n}\r\n\r\nexport function loadTodosError(err) {\r\n    return {\r\n        type: LOAD_TODOS_ERROR,\r\n        err\r\n    }\r\n}","export const ADD_TODO = \"ADD_TODO\";\r\nexport const SET_TODO_COMPLETE = \"SET_TODO_COMPLETE\";\r\nexport const LOAD_TODOS_LOADING = \"LOAD_TODOS_LOADING\";\r\nexport const LOAD_TODOS_SUCCESS = \"LOAD_TODOS_SUCCESS\";\r\nexport const LOAD_TODOS_ERROR = \"LOAD_TODOS_ERROR\";\r\n\r\nexport const ADD_EVENT = \"ADD_EVENT\";\r\nexport const LOAD_EVENTS_LOADING = \"LOAD_EVENTS_LOADING\";\r\nexport const LOAD_EVENTS_SUCCESS = \"LOAD_EVENTS_SUCCESS\";\r\nexport const LOAD_EVENTS_ERROR = \"LOAD_EVENTS_ERROR\";","import React from 'react';\r\nimport { ColumnLayout, Column } from './layout-components/column-layout';\r\nimport Card from './layout-components/card';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\n/**\r\n * This page can now be a functional component - doesn't need to maintain its own state now.\r\n * \r\n * This page is a two-column layout. The first column contains a calendar,\r\n * while the second column contains a summary of current and upcoming events.\r\n */\r\nfunction CalendarPage({ events }) {\r\n\r\n    return (\r\n        <ColumnLayout columns=\"1fr 400px\">\r\n\r\n            <Column>\r\n                <CalendarCard events={events} />\r\n            </Column>\r\n\r\n            <Column>\r\n                <EventsCard events={events} />\r\n            </Column>\r\n        </ColumnLayout>\r\n    );\r\n}\r\n\r\n// This code connects CalendarPage to the Redux store.\r\n// -------------------------------------------------------------\r\n/**\r\n * This function will configure the CalendarPage to have the calendar events from the Redux store\r\n * accessible via a prop called \"events\".\r\n * \r\n * @param state The entire Redux state tree\r\n */\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        events: state.events\r\n    };\r\n}\r\n\r\n// Applies the config using the \"connect\" higher-order component provided by Redux\r\nexport default connect(mapStateToProps)(CalendarPage);\r\n// -------------------------------------------------------------\r\n\r\n/**\r\n * Renders a Card containing a Calendar.\r\n * \r\n * TODO Add the actual calendar :)\r\n */\r\nfunction CalendarCard() {\r\n    return (\r\n        <Card title=\"My Calendar\">\r\n            <p>Calendar goes here</p>\r\n        </Card>\r\n    );\r\n}\r\n\r\n/**\r\n * Renders a Card containing a summary of the given events.\r\n * \r\n * Displays the first currently-occuring event, if any, along with the next upcoming event.\r\n * Also displays a count of events taking place later in the day, week, and month.\r\n * \r\n * @param events The events to summarize\r\n */\r\nfunction EventsCard({ events }) {\r\n    const now = moment();\r\n    const currentEvent = events.find(event => now.isAfter(event.start) && now.isBefore(event.end));\r\n    const futureEvents = events.filter(event => now.isBefore(event.start)).sort();\r\n    const nextEvent = futureEvents && futureEvents[0];\r\n    const numEventsToday = futureEvents.filter(event => now.isSame(event.start, \"day\")).length;\r\n    const numEventsThisWeek = futureEvents.filter(event => now.isSame(event.start, \"week\")).length;\r\n    const numEventsThisMonth = futureEvents.filter(event => now.isSame(event.start, \"month\")).length;\r\n\r\n    return (\r\n        <Card title=\"My Events\">\r\n            <h3>Current:</h3>\r\n            <UpcomingEvent event={currentEvent} messageIfNoEvent=\"Nothing on right now\" />\r\n\r\n            <h3>Next:</h3>\r\n            <UpcomingEvent event={nextEvent} />\r\n\r\n            {numEventsThisMonth && <div>\r\n                <h3>Coming up later...</h3>\r\n                <p><strong>Later today:</strong> {numEventsToday}<br />\r\n                    <strong>Later this week:</strong> {numEventsThisWeek}<br />\r\n                    <strong>Later this month:</strong> {numEventsThisMonth}</p>\r\n            </div>}\r\n        </Card>\r\n    );\r\n}\r\n\r\n/**\r\n * Displays the name, description, and start date of the given event. If the event is currently running,\r\n * then an appropriate message will be displayed. If there is no event, the given fallback message will\r\n * be displayed instead.\r\n * \r\n * @param event The event to display, if any\r\n * @param messageIfNoEvent The message to display if there's no event\r\n */\r\nfunction UpcomingEvent({ event, messageIfNoEvent }) {\r\n\r\n    if (event) {\r\n\r\n        let timeText = moment(event.start).calendar();\r\n        const now = moment();\r\n        if (now.isAfter(event.start) && now.isBefore(event.end)) {\r\n            timeText = \"happening now\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p><strong>{event.name}</strong> <span className=\"text-secondary text-it\">({timeText})</span><br />\r\n                    {event.description}</p>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return <p>{messageIfNoEvent ? messageIfNoEvent : \"No upcoming events\"}</p>\r\n    }\r\n}","import { getTodos, addTodo } from './todos';\r\nimport { getEvents } from './events';\r\n\r\nexport default {\r\n    getTodos,\r\n    addTodo,\r\n\r\n    getEvents\r\n};","\r\nexport function getTodos() {\r\n    return fetch(\"/api/todos\").then(res => res.json());\r\n}\r\n\r\nexport function addTodo(todo) {\r\n    return fetch(\"/api/todos\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(todo)\r\n    });\r\n}","\r\nexport function getEvents() {\r\n    return fetch(\"/api/events\").then(res => res.json());\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport PageHeader from './layout-components/page-header';\r\nimport styles from './app.module.css';\r\nimport NavBar from './layout-components/nav-bar';\r\nimport ToDoPage from './to-do-page';\r\nimport CalendarPage from './calendar-page';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { loadTodos } from './redux/actions/thunk';\r\n\r\n/**\r\n * Renders the page header, navbar, footer, and main content.\r\n * \r\n * The main content is set based on the current URL (achieved using react-router-dom).\r\n */\r\nclass App extends React.Component {\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  //   // this.state = {};\r\n  // }\r\n\r\n  componentDidMount() {\r\n    // this.callApi();\r\n    this.props.loadTodos();\r\n  }\r\n\r\n  // async callApi() {\r\n  //   try {\r\n  //     const response = await fetch(\"/api\");\r\n  //     const json = await response.json();\r\n  //     console.log(json);\r\n  //     this.setServerStatus(`Server status: ${response.status}`);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //     this.setServerStatus(\"Server errored out!\")\r\n  //   }\r\n  // }\r\n\r\n  // setServerStatus(status) {\r\n  //   this.setState(state => ({\r\n  //     serverStatus: status\r\n  //   }));\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className={styles.container}>\r\n\r\n          <PageHeader title=\"Organizer\" description=\"Organize your life!\" />\r\n\r\n          <NavBar links={[\r\n            { path: \"/todos\", text: \"My To-Dos\" },\r\n            { path: \"/calendar\", text: \"My Calendar\" }\r\n          ]} afterLinks={<>\r\n            <p><strong>{this.props.numUpcomingEvents}</strong> upcoming events, <strong>{this.props.numPendingTodos}</strong> pending to-dos</p>\r\n          </>} />\r\n\r\n          <main>\r\n            <Switch>\r\n              <Route path=\"/todos\">\r\n                <ToDoPage />\r\n              </Route>\r\n              <Route path=\"/calendar\">\r\n                <CalendarPage />\r\n              </Route>\r\n              <Route exact path=\"/\">\r\n                <Redirect to=\"/todos\" />\r\n              </Route>\r\n              <Route path=\"*\">\r\n                <p>404 Not Found!!</p>\r\n              </Route>\r\n            </Switch>\r\n          </main>\r\n\r\n          <footer>\r\n            <p>&copy; SE750 / CS732, {moment().format(\"MMMM Do, YYYY\")}\r\n              {/*this.state.serverStatus && <span> {this.state.serverStatus}</span>*/}</p>\r\n          </footer>\r\n\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\n// This code connects App to the Redux store.\r\n// -------------------------------------------------------------\r\n/**\r\n * This function will configure the App to have a couple of values exposed as properties.\r\n * These values are calculated from data contained in the Redux store.\r\n * \r\n * @param state The entire Redux state tree\r\n */\r\nfunction mapStateToProps(state) {\r\n  const now = moment();\r\n  return {\r\n    numUpcomingEvents: state.events.filter(event => now.isBefore(event.start)).length,\r\n    numPendingTodos: state.todos.filter(todo => !todo.completed).length\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadTodos\r\n}\r\n\r\n// Applies the config using the \"connect\" higher-order component provided by Redux\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n// -------------------------------------------------------------","import { loadTodosLoading, loadTodosSuccess, loadTodosError, loadEventsLoading, loadEventsSuccess, loadEventsError } from '..';\r\nimport Api from '../../../api';\r\n\r\nexport function loadTodos() {\r\n    return dispatch => {\r\n\r\n        // First, dispatch the LOAD_TODOS_LOADING action, allowing the rest of our app to detect when\r\n        // we've started loading todos.\r\n        dispatch(loadTodosLoading());\r\n\r\n        // Now, start loading the todos.\r\n        Api.getTodos()\r\n            .then(\r\n\r\n                // If the todos were loaded successfully, dispatch the LOAD_TODOS_SUCCESS action allowing the todos to be added to the store\r\n                todos => dispatch(loadTodosSuccess(todos)),\r\n\r\n                // If there was an error loading todos, dispatch the LOAD_TODOS_ERROR action providing details of the error\r\n                error => dispatch(loadTodosError(error.message || \"Unexpected error!\")));\r\n\r\n    }\r\n}\r\n\r\nexport function loadEvents() {\r\n    return dispatch => {\r\n\r\n        dispatch(loadEventsLoading());\r\n\r\n        Api.getEvents()\r\n            .then(\r\n                events => dispatch(loadEventsSuccess(events)),\r\n\r\n                error => dispatch(loadEventsError(error.message || \"Unexpected error!\")));\r\n\r\n    }\r\n}","import { ADD_TODO, SET_TODO_COMPLETE, LOAD_TODOS_LOADING, LOAD_TODOS_SUCCESS, LOAD_TODOS_ERROR } from '../actions/action-types';\r\nimport moment from 'moment';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n/**\r\n * This function handles modifications to the \"todos\" property of the overall state.\r\n * \r\n * @param state the current todos array. Will be set to [] if it doesn't yet exist.\r\n * @param action the modification to make to the array\r\n * @returns the new todos array\r\n */\r\nexport default function todos(state = [], action) {\r\n    // Perform different things based on the type of action\r\n    switch (action.type) {\r\n\r\n        case ADD_TODO:\r\n            return todos_AddTodo(state, action);\r\n\r\n        case SET_TODO_COMPLETE:\r\n            return todos_SetTodoComplete(state, action);\r\n\r\n        case LOAD_TODOS_LOADING:\r\n            return todos_LoadTodosLoading(state, action);\r\n\r\n        case LOAD_TODOS_SUCCESS:\r\n            return todos_LoadTodosSuccess(state, action);\r\n\r\n        case LOAD_TODOS_ERROR:\r\n            return todos_LoadTodosError(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n/**\r\n * To add a new todo, return a new array with the contents of the old array plus a new todo with\r\n * its `text` set to the given text, and its `completed` status set to `false`.\r\n */\r\nfunction todos_AddTodo(state, action) {\r\n    return [\r\n        ...state,\r\n        {\r\n            id: uuid(),\r\n            text: action.text,\r\n            completed: false,\r\n            modified: moment().format()\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * To change a todo's `completed` status, return a new array where each element in the array is the same\r\n * as the corresponding element in the source array, except the one at the given `index`. That one element\r\n * should be a copy of the old todo, with its `completed` status set to the given value.\r\n */\r\nfunction todos_SetTodoComplete(state, action) {\r\n    return state.map((todo, index) => {\r\n\r\n        if (index === action.index) {\r\n            return Object.assign({}, todo, {\r\n                completed: action.completed,\r\n                modified: moment().format()\r\n            });\r\n        }\r\n\r\n        return todo;\r\n    });\r\n}\r\n\r\n/**\r\n * In this function, we could, if we wanted, set some kind of state to signify that todos are currently being\r\n * loaded from the backend. For example, set a flag that would signal the UI to display a \"loading...\" bar.\r\n */\r\nfunction todos_LoadTodosLoading(state, action) {\r\n    return state;\r\n}\r\n\r\n/**\r\n * In this function, we examine the todo items that have just been loaded from the backend, and merge them with\r\n * any todos which are already in the current state. Exactly how you might do this is application-dependent.\r\n * \r\n * In this case, if there are any incoming todos with different ids than those already in the state, they will be added.\r\n * Also, any incoming todos with the same ids, but a later modification date, will overwrite todos which are already there.\r\n */\r\nfunction todos_LoadTodosSuccess(state, action) {\r\n\r\n    const incoming = action.todos;\r\n\r\n    // Create a new array, where, foreach todo in the existing array...\r\n    const mergedTodos = state.map((todo, index) => {\r\n\r\n        // If an incoming todo has the same id as the todo at this index, AND that\r\n        // incoming todo has a later modified time...\r\n        const match = incoming.find(inc => inc.id === todo.id);\r\n        if (match && moment(match.modified).isAfter(todo.modified)) {\r\n            // substitute the incoming todo\r\n            return match;\r\n        }\r\n\r\n        // Otherwise, keep the current todo\r\n        return todo;\r\n    });\r\n\r\n    // Now, add all the incoming todos which have different ids\r\n    return mergedTodos.concat(incoming.filter(todoA => state.find(todoB => todoA.id === todoB.id) === undefined));\r\n}\r\n\r\n/**\r\n * In this function, we could, if we wanted, set some kind of state to signify that there was an error loading todos\r\n * from the backend. For example, set some kind of error message to be displayed somewhere in the UI.\r\n */\r\nfunction todos_LoadTodosError(state, action) {\r\n    return state;\r\n}","import { ADD_EVENT, LOAD_EVENTS_LOADING, LOAD_EVENTS_SUCCESS, LOAD_EVENTS_ERROR } from '../actions/action-types';\r\nimport moment from 'moment';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n/**\r\n * This function handles modifications to the \"events\" property of the overall state. Currently supports\r\n * adding new events.\r\n * \r\n * @param state the current events array. Will be set to [] if it doesn't yet exist.\r\n * @param action the modification to make to the array\r\n * @returns the new events array\r\n */\r\nexport default function events(state = [], action) {\r\n    switch (action.type) {\r\n\r\n        case ADD_EVENT:\r\n            return events_AddEvent(state, action);\r\n\r\n        case LOAD_EVENTS_LOADING:\r\n            return events_LoadEventsLoading(state, action);\r\n\r\n        case LOAD_EVENTS_SUCCESS:\r\n            return events_LoadEventsSuccess(state, action);\r\n\r\n        case LOAD_EVENTS_ERROR:\r\n            return events_LoadEventsError(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n/**\r\n * To add an event, return a new array with the contents of the old array plus the given event.\r\n */\r\nfunction events_AddEvent(state, action) {\r\n    return [\r\n        ...state,\r\n        {\r\n            ...action.event,\r\n            id: uuid(),\r\n            modified: moment().format()\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * In this function, we could, if we wanted, set some kind of state to signify that events are currently being\r\n * loaded from the backend. For example, set a flag that would signal the UI to display a \"loading...\" bar.\r\n */\r\nfunction events_LoadEventsLoading(state, action) {\r\n    return state;\r\n}\r\n\r\n/**\r\n * In this function, we examine the events that have just been loaded from the backend, and merge them with\r\n * any events which are already in the current state. Exactly how you might do this is application-dependent.\r\n * \r\n * In this case, if there are any incoming events with different ids than those already in the state, they will be added.\r\n * Also, any incoming events with the same ids, but a later modification date, will overwrite events which are already there.\r\n */\r\nfunction events_LoadEventsSuccess(state, action) {\r\n\r\n    const incoming = action.events;\r\n\r\n    // Create a new array, where, foreach todo in the existing array...\r\n    const mergedEvents = state.map((todo, index) => {\r\n\r\n        // If an incoming event has the same id as the event at this index, AND that\r\n        // incoming event has a later modified time...\r\n        const match = incoming.find(inc => inc.id === todo.id);\r\n        if (match && moment(match.modified).isAfter(todo.modified)) {\r\n            // substitute the incoming event\r\n            return match;\r\n        }\r\n\r\n        // Otherwise, keep the current event\r\n        return todo;\r\n    });\r\n\r\n    // Now, add all the incoming events which have different ids\r\n    return [\r\n        ...mergedEvents,\r\n        incoming.filter(eventA => state.find(eventB => eventA.id === eventB.id) === undefined)\r\n    ]\r\n}\r\n\r\n/**\r\n * In this function, we could, if we wanted, set some kind of state to signify that there was an error loading events\r\n * from the backend. For example, set some kind of error message to be displayed somewhere in the UI.\r\n */\r\nfunction events_LoadEventsError(state, action) {\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport events from './events';\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    events\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\n// Initial state\r\nconst initialState = {\r\n    todos: [],\r\n    events: []\r\n}\r\n\r\n// Config for redux-persist\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2\r\n};\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// Create the store, where...\r\nexport const store = createStore(\r\n    pReducer, // This is our reducer (currently the redux-persist one)...\r\n    initialState, // This is our initial state...\r\n    compose( // These are the middlewares we're applying:\r\n        applyMiddleware(thunk), // redux-thunk, and...\r\n        window.devToolsExtension ? window.devToolsExtension() : f => f // The devttools\r\n    )\r\n);\r\n\r\n// Enable persistence of the store\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store, persistor } from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport LoadingView from './components/loading-view';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        {/* The <LoadingView> will be rendered until the state has been rehydrated. Then <App> will be shown. */}\r\n        <PersistGate loading={<LoadingView />} persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>, document.querySelector('#root'));","import React from 'react';\r\n\r\nexport default function LoadingView() {\r\n\r\n    const divStyle = {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={divStyle}>\r\n            <h1>Loading...</h1>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}